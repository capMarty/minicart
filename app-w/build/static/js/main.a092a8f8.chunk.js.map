{"version":3,"sources":["components/form/form.module.css","components/form/Form.jsx","components/info/Info.jsx","components/msg/Msg.jsx","App.js","serviceWorker.js","index.js","components/info/info.module.css"],"names":["module","exports","form","btn","input","Form","props","react_default","a","createElement","className","style","onSubmit","getData","type","name","placeholder","Info","info","Msg","temp","Math","round","concat","clouds","humidity","windSpeed","api","App","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","undefined","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","city","api_url","data","wrap","_context","prev","next","preventDefault","target","firstChild","value","fetch","sent","json","console","log","setState","main","wind","speed","all","stop","_x","inherits","createClass","key","info_Info","form_Form","msg_Msg","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a092a8f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__3FGEt\",\"btn\":\"form_btn__2GvsA\",\"input\":\"form_input__24GLT\"};","import React from 'react';\r\nimport style from './form.module.css';\r\n\r\n\r\nconst Form = (props) =>{\r\n\t\r\n\treturn(\r\n\t\t\t<form className={style.form}  onSubmit={props.getData}>\r\n\t\t\t\t<input className={style.input} type=\"text\" name=\"cite\" placeholder=\"введите город\"/>\r\n\t\t\t\t<button className={style.btn} >Получить погоду</button>\r\n\t\t\t</form>\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t)\r\n}\r\n\r\n\r\nexport default Form;","import React from 'react';\r\nimport style from './info.module.css';\r\n\r\n\r\nconst Info = () =>{\r\n\treturn(\r\n\t\t<h1 className={style.info}>Погодные условия</h1>\r\n\t\t)\r\n\r\n}\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\n\r\nconst Msg = (props) =>{\r\n\tlet temp = Math.round(props.temp);\t\r\n\r\n\treturn(\r\n\t\t<div>\r\n\r\n\t\t{ props.temp && \r\n\t\t\t<div>\r\n\t\t\t\t\t<p>{`Температура: ${temp}°C`}</p>\r\n\t\t\t\t\t<p>{`Облачность: ${props.clouds} %`}</p>\r\n\t\t\t\t\t<p>{`Влажность: ${props.humidity} % `}</p>\r\n\t\t\t\t\t<p>{`Скорость ветра: ${props.windSpeed} метр/сек`}</p>\r\n\t\t\t</div>\r\n\t\t}\r\n\r\n\t\t</div>\r\n\t\t)\r\n};\r\n\r\n\r\nexport default Msg;","import React, {Component} from 'react';\r\nimport Form from './components/form/Form';\r\nimport Info from './components/info/Info';\r\nimport Msg from './components/msg/Msg';\r\n\r\n\r\nconst api = '7c678448e48a3d685ca942041afda0ff';\r\n\r\nexport class App extends Component{\r\n\t// define a state\r\n\tstate = {\r\n\t\ttemp: undefined,\r\n\t\thumidity:undefined,\r\n\t\twindSpeed:undefined,\r\n\t\tclouds:undefined\r\n\t}\r\n\r\n\r\n\tgetData = async (event) =>{\r\n\t\t// \r\n\t\tevent.preventDefault();\r\n\r\n\t\t// create a variablу to define the city\r\n\t\tlet city = event.target.firstChild.value;\r\n\t\t\r\n\r\n\r\n\t\t\r\n\t\t//check input field\r\n\t\tif (city) {\r\n\t\t\t\r\n\t\t\t// get data\r\n\t\tconst api_url = await \r\n\t\tfetch (`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api}&units=metric`);\r\n\t\tconst data = await api_url.json();\t\r\n\r\n\t\t\tconsole.log(data);\r\n\r\n\t\t\t//change state \r\n\t\t\tthis.setState({\r\n\t\t\t\ttemp:data.main.temp,\r\n\t\t\t\thumidity:data.main.humidity,\r\n\t\t\t\twindSpeed:data.wind.speed,\r\n\t\t\t\tclouds:data.clouds.all\r\n\t\t\t});\t\r\n\t\t} \r\n\r\n\t\t\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<Info />\r\n\t\t\t\t\t<div className=\"wrap\">\r\n\t\t\t\t\t\t<Form getData={this.getData}/>\r\n\t\t\t\t\t\t<Msg \r\n\t\t\t\t\t\t\t\ttemp={this.state.temp}\r\n\t\t\t\t\t\t\t\thumidity={this.state.humidity}\r\n\t\t\t\t\t\t\t\twindSpeed={this.state.windSpeed}\r\n\t\t\t\t\t\t\t\tclouds={this.state.clouds}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t</div>)\r\n\r\n\t}\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"info_info__2zMCM\"};"],"sourceRoot":""}